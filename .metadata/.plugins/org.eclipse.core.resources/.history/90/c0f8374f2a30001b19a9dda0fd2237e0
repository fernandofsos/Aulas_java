package br.org.isgh.estatistica.impl;

import java.io.File;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.persistence.EntityManager;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.FlushMode;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.hibernate.transform.Transformers;

import br.org.isgh.estatistica.enums.EstatisticaCovidEnum;
import br.org.isgh.estatistica.vo.DiagnosticosEntradaGeralVo;
import br.org.isgh.estatistica.vo.ObitosGeralVo;
import br.org.isgh.estatistica.vo.TempoMedioClaAtendVo;
import br.org.isgh.paciente.beans.Parametro;
import br.org.isgh.paciente.facade.JPAResourceBean;
import br.org.isgh.paciente.util.FuncUtil;
import br.org.isgh.paciente.util.ParametroImpl;
import br.org.isgh.paciente.vo.EstatisticaEmergenciaVO;
import br.org.isgh.paciente.vo.EstatisticaGerencialVO;
import br.org.isgh.seguranca.util.HibernateUtil;
import br.org.isgh.seguranca.util.criptografia.IsghEncodeDecode;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;

public class EstatisticaImpl {

	private static EstatisticaImpl instancia = null;

	public static EstatisticaImpl getInstancia() {
		if (instancia == null) {
			instancia = new EstatisticaImpl();
		}
		return instancia;
	}

	@SuppressWarnings("unused")
	public long numeroAtendimentosAdultos(Date dataInicial, Date dataFinal)
			throws Exception {

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select i.isn_internacao as adultos "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "where i.dat_cadastro BETWEEN to_date('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_date('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS') "
							+ " and ia.flg_med = 'S' "
							+ "and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) >= 16 ");

			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}

	}
	
	public int numeroObitosAdultos(Date dataInicial, Date dataFinal)
			throws Exception {

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select i.isn_internacao as adultos "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "inner join  "
							+ "(select * from medpoint.t_internacao_leito where isn_internacao_leito in  "
							+ "		( select il.isn_internacao_leito from medpoint.t_internacao_leito il,  "
							+ "				(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito "
							+ "				where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao "
							+ "where il.dat_obito_info BETWEEN to_timestamp('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_timestamp('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS') "
							+ "and il.isn_destino = 4 "
							+ "and extract(year FROM age(i.dat_cadastro,p.dat_nascimento)) >= 16");
			
			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}

	}
	
	public int numeroObitosInfantis(Date dataInicial, Date dataFinal)
			throws Exception {

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select i.isn_internacao as infantis "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "inner join  "
							+ "(select * from medpoint.t_internacao_leito where isn_internacao_leito in  "
							+ "		( select il.isn_internacao_leito from medpoint.t_internacao_leito il,  "
							+ "				(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito "
							+ "				where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao "
							+ "where il.dat_obito_info BETWEEN to_timestamp('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_timestamp('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS') "
							+ "and il.isn_destino = 4 "
							+ "and extract(year FROM age(i.dat_cadastro,p.dat_nascimento)) < 16");

			long count = 0;
			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}

	}
	
	@SuppressWarnings("unchecked")
	public List<List<EstatisticaEmergenciaVO>> dadosCovid(Date dataInicial, Date dataFinal) throws Exception {
		Date dataIni = FuncUtil.startOfDate(dataInicial);
		Date dataFim = FuncUtil.endOfDate(dataFinal);
		// Tirando 10 dias //
		Date dataInternaIni = FuncUtil.adicionarDiasParaData(dataIni, 10, true);
		Date dataInternaFim =  dataFim;

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		try {
			List<List<EstatisticaEmergenciaVO>> list = new  ArrayList<List<EstatisticaEmergenciaVO>>();
			
			for (int i = 0; i < 11; i++) { 
				SQLQuery sqlQuery = sessao.createSQLQuery(sqlDadosCovid(EstatisticaCovidEnum.getFromInt(i), dataIni, dataFim, dataInternaIni, dataInternaFim));
			    sqlQuery.setResultTransformer(Transformers.aliasToBean(EstatisticaEmergenciaVO.class));
			    sqlQuery.setParameter("dataIni", dataIni);
			    sqlQuery.setParameter("dataFim", dataFim);
			    if (i == 1) {
			    	sqlQuery.setParameter("dataInternaIni", dataInternaIni);
				    sqlQuery.setParameter("dataInternaFim", dataInternaFim);
				}
			    
				list.add(sqlQuery.list());
			}
			
			ListIterator<List<EstatisticaEmergenciaVO>> it = list.listIterator();
			while (it.hasNext()) {
				List<EstatisticaEmergenciaVO> ltemp = it.next();
				if (ltemp == null || ltemp.isEmpty()) {
					ltemp = new ArrayList<EstatisticaEmergenciaVO>();
					EstatisticaEmergenciaVO vo = new EstatisticaEmergenciaVO();
					vo.setQuantidade(0);
					vo.setDescricao("Sem Informação");
					vo.setPeriodo(dataIni);
					ltemp.add(vo);
					it.set(ltemp);
				}
			}
			
			return list;
		} catch (Exception e) {
			throw e;
		}
		
	}
	
	public String sqlDadosCovid(EstatisticaCovidEnum sel, Date dataIni, Date dataFim, Date datIniInterna, Date datFimInterna) {
		switch (sel) {
			case ENTRADA_GERAL:
				return "select i.dat_cadastro as \"periodo\", cast(count(*) as integer) as \"quantidade\" " + 
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"where i.dat_cadastro between :dataIni and :dataFim " + 
					"group by i.dat_cadastro " + 
					"order by 1";
			case CLASSIFICACAO_RISCO: 
				return "select i.dat_cadastro as \"periodo\", cast(count(*) as integer) as \"quantidade\" " + 
					"    from medpoint.t_internacao i " + 
					"    inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, " + 
					"           (select isn_internacao, min(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco where dat_registro between :dataInternaIni and :dataInternaFim group by isn_internacao) risco " + 
					"            where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao " + 
					"    inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco " + 
					"where i.dat_cadastro between :dataIni and :dataFim " +
					"group by i.dat_cadastro order by 1";
			case ATM_MEDICO_GERAL: 
				return "select i.dat_cadastro as \"periodo\", cast(count(*) as integer) as \"quantidade\" " + 
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"where i.dat_cadastro between :dataIni and :dataFim " + 
					"group by i.dat_cadastro " + 
					"order by 1";
			case ATM_MEDICO_COVID:
				return "select dat as \"periodo\", cast(count(isn_internacao) as integer) as \"quantidade\" from ( " +
					"select i.isn_internacao, " +
					"cast(to_char(i.dat_cadastro,'dd/mm/yyyy') as date) as dat " +
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"where " + 
					"i.dat_cadastro between :dataIni and :dataFim and " + 
					"ia.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) " + 
					"union all " + 
					"select i.isn_internacao, " + 
					"cast(to_char(it.dat_cadastro,'dd/mm/yyyy') as date) as dat " +
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"	left join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao  " + 
					"where " + 
					"it.dat_cadastro between :dataIni and :dataFim and " + 
					"(it.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) and ia.isn_cid10 not in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899)) " + 
					") as temp group by dat ";				
			case INTERNACOES_COVID:
				return "select dat as \"periodo\", cast(count(isn_internacao) as integer) as \"quantidade\" from ( " +
					"select i.isn_internacao, " + 
				    "cast(to_char(i.dat_cadastro,'dd/mm/yyyy') as date) as dat " +
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao AND IA.ISN_CLINICA_DESTINO IN (2,3,10,4,8) and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"where " + 
					"i.dat_cadastro between :dataIni and :dataFim and " + 
					"ia.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) " + 
					"union all " + 
					"select i.isn_internacao, " + 
					"cast(to_char(it.dat_cadastro,'dd/mm/yyyy') as date) as dat " +
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao AND IA.ISN_CLINICA_DESTINO IN (2,3,10,4,8) and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"	left join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao  " + 
					"where " + 
					"it.dat_cadastro between :dataIni and :dataFim and " + 
					"(it.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) and ia.isn_cid10 not in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899)) " + 
					") as temp group by dat ";
			case ENTRADA_COVID:
				return "select dat as \"periodo\", cast(count(isn_internacao) as integer) as \"quantidade\" from ( " +
			        "select i.isn_internacao, " + 
					"cast(to_char(i.dat_cadastro,'dd/mm/yyyy') as date) as dat " +
			        "	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"where " + 
					"i.dat_cadastro between :dataIni and :dataFim and " + 
					"ia.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) " + 
					"union all " + 
					"select i.isn_internacao, " + 
					"cast(to_char(it.dat_cadastro,'dd/mm/yyyy') as date) as dat " +
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao " + 
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"	left join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao  " + 
					"where " + 
					"it.dat_cadastro between :dataIni and :dataFim and " + 
					"(it.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) and ia.isn_cid10 not in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899)) " + 
					") as temp group by dat";
			case FORAM_PRA_CASA:
				return "select il.dat_alta as \"periodo\", cast(count(*) as integer) as \"quantidade\" " + 
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_internacao_leito il on il.isn_internacao = i.isn_internacao " + 
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"where il.dat_alta between :dataIni and :dataFim and il.isn_destino in (1,2) " + 
					"and IA.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) " + 
					"group by il.dat_alta ";
			case OBITOS:	
				return "select il.dat_alta as \"periodo\", cast(count(*) as integer) as \"quantidade\" " + 
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_internacao_leito il on il.isn_internacao = i.isn_internacao " + 
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"	left join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao " + 
					"where il.dat_alta between :dataIni and :dataFim and il.isn_destino in (4) " + 
					"and (IA.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) or it.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899)) " + 
					"group by il.dat_alta " + 
					"order by 1";
			case FORAM_PRA_CASA_COM_TRANSF:
				return "select it.dat_cadastro as \"periodo\", case when isn_perfil_transf_item in (4,5,15) then 'UTI' ELSE 'ENFERMARIA' end \"descricao\", " + 
					"	cast(count(*) as integer) as \"quantidade\" " + 
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"	inner join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao  " + 
					"where it.dat_cadastro between :dataIni and :dataFim " + 
					"and (IA.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) or it.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899)) " + 
					"group by descricao, it.dat_cadastro " + 
					"order by 1";
			case PERFIL_LEITO_TRANSF:
				return "select il.dat_alta as \"periodo\", case when isn_perfil_transf_item in (4,5,15) then 'UTI' ELSE 'ENFERMARIA' end \"descricao\", " + 
					"cast(count(*) as integer) as \"quantidade\" " + 
					"	from medpoint.t_internacao i " + 
					"	inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao and ia.dat_ini >= :dataIni " +
					"	inner join medpoint.t_internacao_leito il on il.isn_internacao = i.isn_internacao " + 
					"	inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " + 
					"	inner join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao  " + 
					"where il.dat_alta between :dataIni and :dataFim and il.isn_destino in (1,2) " + 
					"and IA.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) " + 
					"group by descricao, il.dat_alta " + 
					"order by 1";
			case TRANSF_EFETIVADAS:	
				return  " select il.dat_alta as \"periodo\", case when isn_perfil_transf_item in (4,5,15) then 'UTI' ELSE 'ENFERMARIA' end \"descricao\"," +	
						" cast(count(*) as integer) as \"quantidade\" "+   
						" from medpoint.t_internacao_trans tit" +
						" inner join " +
						" (select * from medpoint.t_internacao_leito where isn_internacao_leito in (select il.isn_internacao_leito from medpoint.t_internacao_leito il, (select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito" +
						" where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = tit.isn_internacao and il.isn_destino = 3" +
						" inner join medpoint.t_internacao_atendimento tia on tia.isn_internacao = tit.isn_internacao" + 
					    " where il.dat_alta between :dataIni and :dataFim" +
					    " and (tia.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899) or" +
					    " tit.isn_cid10 in (594,4329,902,7986,591,598,4147,4146,4145,4372,4113,4149,4154,7984,899))" + 	
				     	" group by descricao, il.dat_alta" + 
					    " order by 1";   
			default : 
				return "";
		}
	}
	
	public List<ObitosGeralVo> numeroObitos24H(Date dataInicial, Date dataFinal, int periodo)
			throws Exception {
		
		Calendar c = Calendar.getInstance();
		c.setTime(dataInicial);
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		Date dataIni = c.getTime();
        
		c.setTime(dataFinal);
		c.set(Calendar.HOUR_OF_DAY, 23);
		c.set(Calendar.MINUTE, 59);
		c.set(Calendar.SECOND, 59);
		Date dataFim = c.getTime();

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			String hql = "SELECT il.dat_obito_info AS \"datObitoInfo\", p.num_prontuario AS \"numProntuario\", p.dsc_nome AS \"dscNome\", "
					+"to_char((cast( il.dat_obito_info as timestamp ) "
					+"- cast( i.dat_cadastro || ' ' || i.hor_chegada || ':00' as timestamp )), 'DD HH24:MI:SS') AS permanencia, "
					+"substring(to_char((cast( il.dat_obito_info as timestamp ) "
					+"- cast( i.dat_cadastro || ' ' || i.hor_chegada || ':00' as timestamp )), 'DD HH24:MI:SS'),1,3) AS dias, "
					+"extract(year FROM age(i.dat_cadastro,p.dat_nascimento)) AS idade "
					+"FROM medpoint.t_internacao i "
					+ "INNER JOIN "
					+ "(select * from medpoint.t_internacao_leito where isn_internacao_leito in  "
					+ "		( select il.isn_internacao_leito from medpoint.t_internacao_leito il,  "
					+ "				(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito "
					+ "				where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao "
					+"INNER JOIN medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " 
					+"WHERE il.dat_obito_info between :dataInicial and :dataFinal and il.isn_destino = 4 ";
				//	+"AND substring(to_char((cast( il.dat_obito_info as timestamp ) "
			    //    +"- cast( i.dat_cadastro || ' ' || i.hor_chegada || ':00' as timestamp )), 'DD HH24:MI:SS'),1,2) <> '00' ";
			
			if (periodo == 24) { 
			    hql += "AND extract (epoch from age(cast(il.dat_obito_info as timestamp), cast(i.dat_cadastro || ' ' || i.hor_chegada || ':00' as timestamp))) <= 86400 ";
			} else if (periodo == 48) {
			    hql += "AND extract (epoch from age(cast(il.dat_obito_info as timestamp), cast(i.dat_cadastro || ' ' || i.hor_chegada || ':00' as timestamp))) > 86400 ";
			} 
				
			//if (idade < 16)
			//	hql += "AND extract(year FROM age(i.dat_cadastro,p.dat_nascimento)) < 16 ";
			//else
			//	hql += "AND extract(year FROM age(i.dat_cadastro,p.dat_nascimento)) >= 16 ";
				
			hql += "ORDER BY p.dsc_nome ASC ";
			
			SQLQuery sqlQuery = sessao.createSQLQuery(hql);
			sqlQuery.setParameter("dataInicial", dataIni);
			sqlQuery.setParameter("dataFinal", dataFim);
					
			List<ObitosGeralVo> list = sqlQuery.setResultTransformer(new AliasToBeanResultTransformer( ObitosGeralVo.class)).list();
			
			tx.commit();
			return list;
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}

	}
	
	public void relatorioObitoPermanencia(Date dataInicio, Date dataFim, Integer periodo) 
	{
		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		try		{
			relatorioObitoPermanencia(sessao, dataInicio, dataFim, periodo);
		} catch (Exception e) {
			throw e;
		} finally {
			sessao.close();
		}
	}
	
	public void relatorioObitoPermanencia(Session sessao,
			Date dataInicio, Date dataFim, Integer periodo) 
	{
		Connection con = null;
		try
		{
			String nomeRelatorio    = "relObito";
			Timestamp timeInicio = new Timestamp(dataInicio.getTime());
			Timestamp timeFim    = new Timestamp(dataFim.getTime());
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Float maxPeriodo = 0f, minPeriodo = 0f;
			String titlePermanencia, titlePeriodo, where;
			
			titlePeriodo = sdf.format(dataInicio) + "  a  " + sdf.format(dataFim);
			
			if (periodo == 24) { 
				where = " <= 86400 ";
				titlePermanencia = "Até 24h";
			} else if (periodo == 48) { 
				where = " > 86400 ";
				titlePermanencia = "Maior que 24h";
			} else {
				where = " > 0";
				titlePermanencia = "Todos";
			}
			
			HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			
			FuncUtil.apagarArquivos(request);
			
	        String pathJasper     = request.getRealPath("WEB-INF/classes/relatorio");
	        String pathJasperImg  = request.getRealPath("IMG/" + new FuncUtil().retornaLogoBrasaoUpa());
	        String pathJasperImg2 = request.getRealPath("IMG/" + "upa.gif");
	        
	        String os = System.getProperty("os.name");	
	        File pasta = new File((os.toLowerCase().indexOf("linux") > -1 ? "/" : "\\"));
	        
	        pathJasper += pasta; 
	        
	        JasperReport jasperReport = (JasperReport) JRLoader.loadObject(pathJasper + "/" + nomeRelatorio + ".jasper");
	
	        if (jasperReport == null)
	        {
	           FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, "Nenhum relatório selecionado.", null));
	        }
	        
	        Map parameters = new HashMap();
	        
	        parameters.put("CAMINHO_IMG_BRASAO", pathJasperImg);
	        parameters.put("CAMINHO_IMG_UPA", pathJasperImg2);
	        parameters.put("DATA_INICIAL", timeInicio);
	        parameters.put("DATA_FINAL", timeFim);
	        parameters.put("MAX_PERIODO", maxPeriodo);
	        parameters.put("MIN_PERIODO", minPeriodo);
	        parameters.put("WHERE", where);
	        parameters.put("TITLE_PERMANENCIA", titlePermanencia);
	        parameters.put("TITLE_PERIODO", titlePeriodo);
	        parameters.put("SUBREPORT_DIR", pathJasper);
	        
	        //PARAMETROS CONEXAO BANCO DE DADOS - INICIO
	        String urlBd ="", userBd = "", senhaBd = "";
	        
	        //usuario
	        Parametro parametro = new Parametro();
	        parametro.setIsnParametro(ParametroImpl.USUARIO_BANCO_DADOS);
	        parametro = ParametroImpl.getInstancia().get(sessao, parametro, 0);
	        userBd = parametro.getVlrParametro();
	        //senha
	        parametro = new Parametro();
	        parametro.setIsnParametro(ParametroImpl.SENHA_CRIPTOGRAFADA_BANCO_DADOS);
	        parametro = ParametroImpl.getInstancia().get(sessao, parametro, 0);
	        senhaBd = IsghEncodeDecode.decrypt(parametro.getVlrParametro());
	        //url
	        parametro = new Parametro();
	        parametro.setIsnParametro(ParametroImpl.URL_CONEXAO_BANCO_DADOS);
	        parametro = ParametroImpl.getInstancia().get(sessao, parametro, 0);
	        urlBd = parametro.getVlrParametro();
	        //PARAMETROS CONEXAO BANCO DE DADOS - FIM	        
	        
	    	con = (Connection) DriverManager.getConnection(urlBd, userBd, senhaBd);
	    	
	    	JasperPrint impressao = JasperFillManager.fillReport(jasperReport, parameters, con);
	    	
	        String pathPdf =  "/temp/"
	        				  + request.getRequestedSessionId()
	                          + String.valueOf(Math.random() * 10000)
	                          + nomeRelatorio
	                          + ".pdf";
	        
	        HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
	        
	        if(impressao != null 
	        		&& impressao.getPages() != null
	        		&& !impressao.getPages().isEmpty())
	        {
	        	JasperExportManager.exportReportToPdfFile(impressao, request.getRealPath("") + pathPdf);
	        	response.sendRedirect(request.getContextPath() + pathPdf);
	        }
	        else
	        {
	        	JasperReport jasperReport2 = (JasperReport) JRLoader.loadObject(pathJasper + "/relObitoVazio.jasper");
	        	JasperPrint impressao2 = JasperFillManager.fillReport(jasperReport2, parameters, con);
		        
	        	String pathPdf2 =  "/temp/"
      				  + request.getRequestedSessionId()
                        + String.valueOf(Math.random() * 10000)
                        + "relObitoVazio"
                        + ".pdf";
	        	
	        	JasperExportManager.exportReportToPdfFile(impressao2, request.getRealPath("") + pathPdf2);
	        	response.sendRedirect(request.getContextPath() + pathPdf2);
	        }
	        
	        
	        con.close();
		}		
		catch (Exception e) 
		{
			if(con != null)
			{
				try 
				{
					con.close();
				} 
				catch (SQLException e1) 
				{
					e1.printStackTrace();
				}
			}
			e.printStackTrace();
		}
	}
	
	public List<TempoMedioClaAtendVo> chamaTempoMedioEntreRegistroEClassificacao(Date inicio, Date fim){
		Session session = HibernateUtil.getSession();
		try{
			GregorianCalendar dtInicio = (GregorianCalendar) GregorianCalendar.getInstance();
			dtInicio.setTime(inicio);
			dtInicio.set(GregorianCalendar.HOUR, 0);
			dtInicio.set(GregorianCalendar.MINUTE, 0);
			dtInicio.set(GregorianCalendar.SECOND, 0);
			dtInicio.set(GregorianCalendar.MILLISECOND, 0);
		
			GregorianCalendar dtFim = (GregorianCalendar) GregorianCalendar.getInstance();
			dtFim.setTime(fim);
			dtFim.set(GregorianCalendar.HOUR, 23);
			dtFim.set(GregorianCalendar.MINUTE, 59);
			dtFim.set(GregorianCalendar.SECOND, 59);
			dtFim.set(GregorianCalendar.MILLISECOND, 59);
			SimpleDateFormat odf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
			String sql = " SELECT r.isn_risco  AS \"isnRisco\" , "
					+ " CAST( to_char(i.dat_cadastro,'mm/yyyy') AS CHARACTER VARYING (7) ) periodo, "
					+ " r.dsc_risco as \"dscRisco\", CAST( AVG( ( CAST( (ir.dat_ini || ' ' || ir.dsc_hor_ini || ':00')  AS TIMESTAMP)  - CAST( (i.dat_cadastro || ' ' || i.hor_chegada || ':00' ) AS TIMESTAMP ) ) ) AS CHARACTER VARYING (8) ) media "
					+ " FROM medpoint.t_internacao i "
					+ " INNER JOIN 	( SELECT TT.isn_internacao, "
					+ " TT.isn_internacao_risco, TT.isn_risco , TT.dat_ini, TT.dsc_hor_ini FROM ( SELECT "
					+ " ir.isn_internacao_risco, ir.isn_internacao, "
					+ " ir.isn_risco, CAST( ( ir.dat_registro || ' ' ||ir.hor_registro || ':00') AS TIMESTAMP ) DAT_REF, "
					+ " rank() OVER ( PARTITION BY ir.isn_internacao ORDER BY CAST( ( ir.dat_registro || ' ' ||ir.hor_registro || ':00' ) AS TIMESTAMP ) ASC ) AS posicao, "
					+ " ir.dat_ini, ir.dsc_hor_ini FROM medpoint.t_internacao_risco ir ) TT WHERE TT.POSICAO = 1) ir ON ir.isn_internacao = i.isn_internacao "
					+ " INNER JOIN medpoint.t_risco r ON r.isn_risco = ir.isn_risco  "
					+ " WHERE i.dat_cadastro BETWEEN '"+odf.format(dtInicio.getTime())+"' AND '"+odf.format(dtFim.getTime())+"' GROUP BY TO_CHAR( i.dat_cadastro, 'mm/yyyy' ), r.dsc_risco, r.isn_risco ORDER BY r.isn_risco ASC ";
			
			List<TempoMedioClaAtendVo> lista = session.createSQLQuery(sql).setResultTransformer(new AliasToBeanResultTransformer(TempoMedioClaAtendVo.class)).list();
			
			return lista;
		}catch(Exception e){
			throw e;
		}finally {
			session.close();
		}
	}
	@SuppressWarnings("unused")
	public long numeroAtendimentosInfantis(Date dataInicial, Date dataFinal)
			throws Exception {

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select i.isn_internacao as infantis "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "where i.dat_cadastro BETWEEN to_date('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_date('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS') "
							+ " and ia.flg_med = 'S' "
							+ "and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) < 16");

			long count = 0;
			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}

	}
	
	@SuppressWarnings("unused")
	public long numeroAtendimentosOdontoAdulto(Date dataInicial, Date dataFinal)
			throws Exception {
		
		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";
		
		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select i.isn_internacao as infantis "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "where i.dat_cadastro BETWEEN to_date('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_date('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS') "
							+ " and ia.flg_odonto = 'S' and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) >= 16");
			
			long count = 0;
			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}
		
	}
	@SuppressWarnings("unused")
	public long numeroAtendimentosOdontoInfantil(Date dataInicial, Date dataFinal)
			throws Exception {
		
		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";
		
		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select i.isn_internacao as infantis "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "where i.dat_cadastro BETWEEN to_date('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_date('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS') "
							+ " and ia.flg_odonto = 'S' and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) < 16");
			
			long count = 0;
			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}
		
	}

	@SuppressWarnings("unused")
	public long numeroAtendimentosCorAdulto(Date dataInicial, Date dataFinal)
			throws Exception {

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dataInicial)
				+ " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dataFinal)
				+ " 23:59:59";

		Session sessao = HibernateUtil.getSession();
		sessao.setFlushMode(FlushMode.COMMIT);
		Transaction tx = sessao.beginTransaction();
		try {
			SQLQuery sqlQuery = sessao
					.createSQLQuery("select r.isn_risco, r.dsc_risco, count(*) "
							+ "from medpoint.t_internacao i "
							+ "inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente "
							+ "inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao "
							+ "inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, "
							+ "(select isn_internacao, max(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco group by isn_internacao) risco "
							+ "where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao	"
							+ "inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco "
							+ "where i.dat_cadastro BETWEEN to_date('"
							+ dataIni
							+ "','dd/MM/yyyy HH24:MI:SS') and to_date('"
							+ dataFim
							+ "','dd/MM/yyyy HH24:MI:SS')	"
							+ "and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) >= 16 "
							+ "group by r.isn_risco, r.dsc_risco "
							+ "order by r.isn_risco");

			long count = 0;
			List list = sqlQuery.list();
			tx.commit();
			return list.size();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		} finally {
			sessao.close();
		}

	}

	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaCor(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {

			String sqlTotal = "select COALESCE(ir.isn_risco,0) ISN, COALESCE(r.dsc_risco,'N/C') DESCRICAO, count(*) QUANTIDADE " +
					"from medpoint.t_internacao i " +
					"inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " +
					"inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao  inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, " +
					"(select isn_internacao, max(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco group by isn_internacao) risco " +
					"where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao	" +
					"inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco " +
					"where i.dat_cadastro BETWEEN to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')	" +
					"group by r.isn_risco, r.dsc_risco, ir.isn_risco " +
					"order by r.isn_risco";

			// Totais
			ArrayList<EstatisticaEmergenciaVO> totais = new ArrayList<EstatisticaEmergenciaVO>();
			List<Object[]> lista = em.createNativeQuery(sqlTotal).getResultList();

			for (Object[] o : lista) {
				totais.add(new EstatisticaEmergenciaVO(Integer.parseInt(o[0]
						.toString()), (String) o[1], Integer.parseInt(o[2]
						.toString())));
			}
			estatistica = totais;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	
	public Object gerarEstatisticaCorAdulto(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {

			String sqlAdulto = "select COALESCE(ir.isn_risco,0) ISN, COALESCE(r.dsc_risco,'N/C') DESCRICAO, count(*) QUANTIDADE " +
					"from medpoint.t_internacao i " +
					"inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " +
					"inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao  inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, " +
					"(select isn_internacao, max(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco group by isn_internacao) risco " +
					"where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao	" +
					"inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco " +
					"where i.dat_cadastro BETWEEN to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')	" +
					"and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) >= 16	" +
					"group by r.isn_risco, r.dsc_risco, ir.isn_risco " +
					"order by r.isn_risco"; 

			// classificacao de Risco
			ArrayList<EstatisticaEmergenciaVO> riscos = new ArrayList<EstatisticaEmergenciaVO>();

			List<Object[]> lista = em.createNativeQuery(sqlAdulto).getResultList();
			for (Object[] o : lista) {
				riscos.add(new EstatisticaEmergenciaVO(Integer.parseInt(o[0]
						.toString()), (String) o[1], Integer.parseInt(o[2]
						.toString())));
			}
			estatistica = riscos;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	
	public Object gerarEstatisticaCorInfantil(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {

			String sqlInfantil = "select COALESCE(ir.isn_risco,0) ISN, COALESCE(r.dsc_risco,'N/C') DESCRICAO, count(*) QUANTIDADE " +
					"from medpoint.t_internacao i " +
					"inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " +
					"inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, " +
					"(select isn_internacao, max(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco group by isn_internacao) risco " +
					"where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao	" +
					"inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco " +
					"where i.dat_cadastro BETWEEN to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')	" +
					"and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) < 16	" +
					"group by r.isn_risco, r.dsc_risco, ir.isn_risco " +
					"order by r.isn_risco";
			
			// classificacao de Risco
			ArrayList<EstatisticaEmergenciaVO> riscos = new ArrayList<EstatisticaEmergenciaVO>();

			//List<Object[]> lista = em.createNativeQuery(sqlInfantil).getResultList();

			// Resumindo por infantis

			ArrayList<EstatisticaEmergenciaVO> infantis = new ArrayList<EstatisticaEmergenciaVO>();
			List<Object[]> listaInf = em.createNativeQuery(sqlInfantil).getResultList();

			for (Object[] o : listaInf) {
				infantis.add(new EstatisticaEmergenciaVO(Integer.parseInt(o[0]
						.toString()), (String) o[1], Integer.parseInt(o[2]
						.toString())));
			}
			
			/*for (EstatisticaEmergenciaVO ee : riscos) {
				int i = 0;
				infantis.add(new EstatisticaEmergenciaVO(ee.getIsn(), ee
						.getDescricao(), ee.getQuantidade()));
				while (i < listaInf.size()) {
					if (listaInf.get(i)[0].toString()
							.equals(ee.getDescricao())) {
						Object item[] = listaInf.get(i);
						if (item[1] == null)
							item[1] = "";
						infantis.get(infantis.size() - 1)
								.getSubItens()
								.add(new EstatisticaEmergenciaVO(0, item[1]
										.toString(), Integer
										.parseInt(item[2].toString())));
					}
					i++;
				}
			}*/
			estatistica = infantis;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	public List<TempoMedioClaAtendVo> chamaTempoMedioEntreClassifiçãoAtedimentoMedico(Date inicio, Date fim){
		Session session = HibernateUtil.getSession();
		try{
			GregorianCalendar dtInicio = (GregorianCalendar) GregorianCalendar.getInstance();
			dtInicio.setTime(inicio);
			dtInicio.set(GregorianCalendar.HOUR, 0);
			dtInicio.set(GregorianCalendar.MINUTE, 0);
			dtInicio.set(GregorianCalendar.SECOND, 0);
			dtInicio.set(GregorianCalendar.MILLISECOND, 0);
		
			GregorianCalendar dtFim = (GregorianCalendar) GregorianCalendar.getInstance();
			dtFim.setTime(fim);
			dtFim.set(GregorianCalendar.HOUR, 23);
			dtFim.set(GregorianCalendar.MINUTE, 59);
			dtFim.set(GregorianCalendar.SECOND, 59);
			dtFim.set(GregorianCalendar.MILLISECOND, 59);
			SimpleDateFormat odf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String sql = " SELECT r.isn_risco \"isnRisco\" , "
					+ " ( to_char(i.dat_cadastro,'mm/yyyy') ) perido, "
					+ " (r.dsc_risco) dscRisco, CAST ( AVG( CAST( ia.dat_ini || ' ' || ia.dsc_hor_ini || ':00' AS TIMESTAMP ) - CAST( ir.dat_registro || ' ' || ir.hor_registro || ':00' AS TIMESTAMP ) ) AS CHARACTER VARYING(8) ) media "
					+ " FROM medpoint.t_internacao i "
					+ " INNER JOIN  ( SELECT"
					+ " TT.isn_internacao, "
					+ " TT.isn_internacao_risco, "
					+ " TT.isn_risco, "
					+ " TT.dat_ini, "
					+ " TT.dsc_hor_ini, "
					+ " TT.dat_registro, "
					+ "	TT.hor_registro "
					+ " FROM ( SELECT "
					+ " ir.isn_internacao_risco, "
					+ " ir.isn_internacao, "
					+ " ir.dat_registro, "
					+ " ir.hor_registro, "
					+ " ir.isn_risco, "
					+ " CAST( ir.dat_registro || ' ' ||ir.hor_registro || ':00' AS TIMESTAMP ) DAT_REF, "
					+ " rank() OVER ( PARTITION BY ir.isn_internacao ORDER BY CAST( ir.dat_registro || ' ' ||ir.hor_registro || ':00' AS TIMESTAMP) DESC ) AS posicao, "
					+ " ir.dat_ini, "
					+ " ir.dsc_hor_ini "
					+ " FROM "
					+ " medpoint.t_internacao_risco ir ) TT  WHERE TT.POSICAO = 1 ) ir on ir.isn_internacao = i.isn_internacao "
					+ " INNER JOIN medpoint.t_risco r on r.isn_risco = ir.isn_risco "
					+ " INNER JOIN medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao "
					+ " WHERE "
					+ " i.dat_cadastro between '"+odf.format(dtInicio.getTime())+"' and '"+odf.format(dtFim.getTime())+"' "
					+ " GROUP BY "
					+ " to_char( i.dat_cadastro,'mm/yyyy' ), r.dsc_risco,r.isn_risco "
					+ " ORDER BY "
					+ " to_char( i.dat_cadastro,'mm/yyyy' ) ASC ";
			return session.createSQLQuery(sql).setResultTransformer(new AliasToBeanResultTransformer(TempoMedioClaAtendVo.class)).list();
		}catch(Exception e){
			throw e;
		}finally {
			session.close();
		}
	}
	@SuppressWarnings("unchecked")
	public List<DiagnosticosEntradaGeralVo>  gerarDiagniosticosEntradaGeral(Date inicio, Date fim,Integer isnClinica){
		Session session = HibernateUtil.getSession();
		try{
			GregorianCalendar dtInicio = (GregorianCalendar) GregorianCalendar.getInstance();
			dtInicio.setTime(inicio);
			dtInicio.set(GregorianCalendar.HOUR, 0);
			dtInicio.set(GregorianCalendar.MINUTE, 0);
			dtInicio.set(GregorianCalendar.SECOND, 0);
			dtInicio.set(GregorianCalendar.MILLISECOND, 0);
		
			GregorianCalendar dtFim = (GregorianCalendar) GregorianCalendar.getInstance();
			dtFim.setTime(fim);
			dtFim.set(GregorianCalendar.HOUR, 23);
			dtFim.set(GregorianCalendar.MINUTE, 59);
			dtFim.set(GregorianCalendar.SECOND, 59);
			dtFim.set(GregorianCalendar.MILLISECOND, 59);
			SimpleDateFormat odf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			
			String sql = " SELECT "
					+ " c.dsc_clinica as \"dscClinica\", "
					+ " count(ig.isn_cid10) as qtd, "
					+ " cid.dsc_cid10  as \"dscCid\" "
					+ " FROM (SELECT "
					+ " isn_cid10, "
					+ " isn_internacao "
					+ " FROM medpoint.t_internacao_atendimento "
					+ " ) ig "
					+ " INNER JOIN medpoint.t_cid10 cid on cid.isn_cid10 = ig.isn_cid10 "
					+ " INNER JOIN ( SELECT "
					+ " isn_internacao, "
					+ " isn_tipo_atendimento, "
					+ " dat_cadastro "
					+ " FROM "
					+ " medpoint.t_internacao "
					+ " ) i ON i.isn_internacao = ig.isn_internacao AND isn_tipo_atendimento = 2 AND i.dat_cadastro BETWEEN '"+odf.format(dtInicio.getTime())+"' AND '"+odf.format(dtFim.getTime())+"' "
					+ " INNER JOIN  ( SELECT "
					+ " DISTINCT isn_internacao, "
					+ " isn_clinica "
					+ " FROM "
					+ " medpoint.t_internacao_leito "
					+ " WHERE "
					+ " isn_clinica = "+isnClinica+") il ON il.isn_internacao = i.isn_internacao "
					+ " INNER JOIN medpoint.t_clinica c ON c.isn_clinica = il.isn_clinica "
					+ " GROUP BY "
					+ " c.dsc_clinica, "
					+ " ig.isn_cid10, "
					+ " cid.dsc_cid10 "
					+ " ORDER BY 2 DESC "
					+ " LIMIT 5 ";
			return session.createSQLQuery(sql).setResultTransformer(new AliasToBeanResultTransformer(DiagnosticosEntradaGeralVo.class)).list();
			
		}catch(Exception e){
			throw e;
		}finally {
			session.close();
		}
	}
	public Object gerarEstatisticaLimiteInfantil(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {
			
			String sqlLimite =" SELECT r.isn_risco, dsc_risco, count(dsc_risco) quantidade "
					+ " FROM "
					+ " ( SELECT "
					+ " * FROM ("
					+ " SELECT "
					+ " isn_internacao, "
					+ " isn_internacao_risco, "
					+ " isn_risco, dat_registro, "
					+ "  hor_registro, "
					+ " rank() over( PARTITION BY isn_internacao ORDER BY isn_internacao_risco DESC ) FROM medpoint.t_internacao_risco ) ranked ) ir "
					+ " INNER JOIN medpoint.t_internacao i ON i.isn_internacao = ir.isn_internacao "
					+ " INNER JOIN medpoint.t_paciente p ON p.isn_paciente = i.isn_paciente "
					+ " INNER JOIN medpoint.t_internacao_atendimento ia ON ia.isn_internacao = i.isn_internacao "
					+ " INNER JOIN medpoint.t_risco r ON r.isn_risco = ir.isn_risco "
					+ " WHERE "
					+ " ir.rank = 1 AND "
					+ " i.dat_cadastro BETWEEN '"+dataIni+"' AND '"+dataFim+"' AND "
					+ " CAST( to_char( age( i.dat_cadastro, p.dat_nascimento), 'yy') AS INTEGER) < 16 AND "
					+ " extract( EPOCH from (cast( ia.dat_ini || ' ' || ia.dsc_hor_ini || ':00' as timestamp ) - cast( ir.dat_registro || ' ' || ir.hor_registro || ':00' as timestamp ))) <= r.limite_espera "
					+ " GROUP BY R.ISN_RISCO,R.DSC_RISCO ORDER BY R.ISN_RISCO "; 

			ArrayList<EstatisticaEmergenciaVO> totais = new ArrayList<EstatisticaEmergenciaVO>();
			List<Object[]> lista = em.createNativeQuery(sqlLimite).getResultList();

			for (Object[] o : lista) {
				totais.add(new EstatisticaEmergenciaVO(Integer.parseInt(o[0]
						.toString()), (String) o[1], Integer.parseInt(o[2]
						.toString())));
			}
			estatistica = totais;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	/*
	 * Pacientes Atendidos Dentro do Limite Espera
	 */
	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaLimite(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {
			
			String sqlLimite =" SELECT r.isn_risco, dsc_risco, count(dsc_risco) quantidade "
					+ " FROM "
					+ " ( SELECT "
					+ " * FROM ("
					+ " SELECT "
					+ " isn_internacao, "
					+ " isn_internacao_risco, "
					+ " isn_risco, dat_registro, "
					+ "  hor_registro, "
					+ " rank() over( PARTITION BY isn_internacao ORDER BY isn_internacao_risco DESC ) FROM medpoint.t_internacao_risco ) ranked ) ir "
					+ " INNER JOIN medpoint.t_internacao i ON i.isn_internacao = ir.isn_internacao "
					+ " INNER JOIN medpoint.t_paciente p ON p.isn_paciente = i.isn_paciente "
					+ " INNER JOIN medpoint.t_internacao_atendimento ia ON ia.isn_internacao = i.isn_internacao "
					+ " INNER JOIN medpoint.t_risco r ON r.isn_risco = ir.isn_risco "
					+ " WHERE "
					+ " ir.rank = 1 AND "
					+ " i.dat_cadastro BETWEEN '"+dataIni+"' AND '"+dataFim+"' AND "
					+ " CAST( to_char( age( i.dat_cadastro, p.dat_nascimento), 'yy') AS INTEGER) >= 16 AND "
					+ " extract( EPOCH from (cast( ia.dat_ini || ' ' || ia.dsc_hor_ini || ':00' as timestamp ) - cast( ir.dat_registro || ' ' || ir.hor_registro || ':00' as timestamp ))) <= r.limite_espera "
					+ " GROUP BY R.ISN_RISCO,R.DSC_RISCO ORDER BY R.ISN_RISCO "; 
			
			ArrayList<EstatisticaEmergenciaVO> totais = new ArrayList<EstatisticaEmergenciaVO>();
			List<Object[]> lista = em.createNativeQuery(sqlLimite).getResultList();

			for (Object[] o : lista) {
				totais.add(new EstatisticaEmergenciaVO(Integer.parseInt(o[0]
						.toString()), (String) o[1], Integer.parseInt(o[2]
						.toString())));
			}
			estatistica = totais;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	
	/*
	 * Pacientes Classificados e Não Atendidos
	 */
	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaClassificados(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {
			
			String sql = "with risco as ( " + 
					"select " + 
					"	isn_internacao, " + 
					"	max(isn_internacao_risco) as isn_internacao_risco " + 
					"from " + 
					"	medpoint.t_internacao_risco " + 
					"where " + 
					"	dat_registro between to_date(:dataIni, 'dd/MM/yyyy HH24:MI:SS') and to_date(:dataFim, 'dd/MM/yyyy HH24:MI:SS') " + 
					"group by " + 
					"	isn_internacao) " + 
					"select " + 
					"	ir.isn_risco ISN, " + 
					"	r.dsc_risco, " + 
					"	count(*) QUANTIDADE " + 
					"from " + 
					"	medpoint.t_internacao i " + 
					"inner join risco on " + 
					"	risco.isn_internacao = i.isn_internacao " + 
					"inner join medpoint.t_internacao_risco ir on " + 
					"	ir.isn_internacao_risco = risco.isn_internacao_risco " + 
					"inner join medpoint.t_risco r on " + 
					"	r.isn_risco = ir.isn_risco " + 
					"where " + 
					"	i.dat_cadastro between to_date(:dataIni,'dd/MM/yyyy HH24:MI:SS') and to_date(:dataFim,'dd/MM/yyyy HH24:MI:SS') " + 
					"	and ir.isn_internacao not in ( " + 
					"	select " + 
					"		isn_internacao " + 
					"	from " + 
					"		medpoint.t_internacao_atendimento " + 
					"	where " + 
					"		dat_ini between to_date(:dataIni, 'dd/MM/yyyy HH24:MI:SS') -1 and to_date(:dataFim, 'dd/MM/yyyy HH24:MI:SS') + 1 ) " + 
					"group by " + 
					"	r.dsc_risco, " + 
					"	ir.isn_risco " + 
					"order by " + 
					"	ir.isn_risco";
					
			ArrayList<EstatisticaEmergenciaVO> totais = new ArrayList<EstatisticaEmergenciaVO>();
			javax.persistence.Query query = em.createNativeQuery(sql);
			
			query.setParameter("dataIni", dataIni);
			query.setParameter("dataFim", dataFim);
			
			List<Object[]> lista = query.getResultList();

			for (Object[] o : lista) {
				totais.add(new EstatisticaEmergenciaVO(Integer.parseInt(o[0]
						.toString()), (String) o[1], Integer.parseInt(o[2]
						.toString())));
			}
			estatistica = totais;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	
	/*
	 * Pacientes Cadastrados, Não Classificados e Nem Atendidos
	 */
	public BigInteger gerarEstatisticaNaoClassificados(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";
		
		List lista = new ArrayList();
		
		try {
			
			String sql = "select count(*) " +
					"from medpoint.t_internacao i " +
					"where i.dat_cadastro BETWEEN to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')	" +
					"and i.isn_internacao not in (select isn_internacao from medpoint.t_internacao_risco)";

			lista = em.createNativeQuery(sql).getResultList();
			
		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}
		return (BigInteger) lista.get(0);
	}
	
	/*
	 * Tempo Médio de Espera
	 */
	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaTempoMedioEspera(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {
			
			String sql = "select ir.isn_risco, r.dsc_risco as cor_risco, " +
					"count(*) as quantidade, " +
					"to_char(sum((cast( ia.dat_ini || ' ' || ia.dsc_hor_ini || ':00' as timestamp ) - cast( ir.dat_registro || ' ' || ir.hor_registro || ':00' as timestamp ))) / count(*), 'DD:HH24:MI:SS') as media " +
					"from medpoint.t_internacao i " +
					"inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, " +
					"(select isn_internacao, max(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco group by isn_internacao) risco " +
					"where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao	" +
					"inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco " +
					"inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao " +
					"where i.dat_cadastro  between to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS') " +
					"and ir.dat_registro is not null and ir.hor_registro is not null and ia.dat_ini is not null and ia.dsc_hor_ini is not null " +
					"group by ir.isn_risco, r.dsc_risco	" +
					"order by ir.isn_risco";

			ArrayList<EstatisticaGerencialVO> totais = new ArrayList<EstatisticaGerencialVO>();
			List<Object[]> lista = em.createNativeQuery(sql).getResultList();

			for (Object[] o : lista) {
				totais.add(new EstatisticaGerencialVO(Integer.parseInt(o[0].toString()), (String) o[1], Integer.parseInt(o[2].toString()), (String) o[3]));
			}
			estatistica = totais;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	
	/*
	 * Tempo Máximo de Espera
	 */
	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaTempoMaximoEspera(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";

		try {
			
			String sql = "select ir.isn_risco, r.dsc_risco as cor_risco, " +
					"count(*) as quantidade, " +
					"to_char(max((cast( ia.dat_ini || ' ' || ia.dsc_hor_ini || ':00' as timestamp ) - cast( ir.dat_registro || ' ' || ir.hor_registro || ':00' as timestamp ))), 'DD:HH24:MI:SS') as maximo " +
					"from medpoint.t_internacao i " +
					"inner join (select * from medpoint.t_internacao_risco where isn_internacao_risco in ( select ir.isn_internacao_risco from medpoint.t_internacao_risco ir, " +
					"(select isn_internacao, max(isn_internacao_risco) as isn_internacao_risco from medpoint.t_internacao_risco group by isn_internacao) risco " +
					"where ir.isn_internacao_risco = risco.isn_internacao_risco)) as ir on ir.isn_internacao = i.isn_internacao	" +
					"inner join medpoint.t_risco r on r.isn_risco = ir.isn_risco " +
					"inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao " +
					"where i.dat_cadastro between to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')	" +
					"and ir.dat_registro is not null and ir.hor_registro is not null and ia.dat_ini is not null and ia.dsc_hor_ini is not null " +
					"group by ir.isn_risco, r.dsc_risco " +
					"order by ir.isn_risco";

			ArrayList<EstatisticaGerencialVO> totais = new ArrayList<EstatisticaGerencialVO>();
			List<Object[]> lista = em.createNativeQuery(sql).getResultList();

			for (Object[] o : lista) {
				totais.add(new EstatisticaGerencialVO(Integer.parseInt(o[0].toString()), (String) o[1], Integer.parseInt(o[2].toString()), (String) o[3]));
			}
			estatistica = totais;

		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}

		return estatistica;
	}
	
	/*
	 * Número Total de Transferências
	 */
	public BigInteger gerarEstatisticaNumTransferencias(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";
		
		List lista = new ArrayList();
		
		try {
			
			String sql = "select count(*) " +
					"from medpoint.t_internacao i " +
					"inner join (select * from medpoint.t_internacao_leito where isn_internacao_leito in ( select il.isn_internacao_leito from medpoint.t_internacao_leito il, " +
					"(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito " +
					"where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao	" +
					"where il.isn_motivo_alta = 5 " +
					"and i.dat_cadastro between  to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')";

			lista = em.createNativeQuery(sql).getResultList();
			
		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}
		return (BigInteger) lista.get(0);
	}
	
	/*
	 * Número Total de Transferências em mais de 24hrs
	 */
	public BigInteger gerarEstatisticaNumTransferencias24h(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";
		
		List lista = new ArrayList();
		
		try {
			
			String sql = "select count(*) " +
					"from medpoint.t_internacao i " +
					"inner join medpoint.t_internacao_atendimento ia on ia.isn_internacao = i.isn_internacao " +
					"inner join (select * from medpoint.t_internacao_leito where isn_internacao_leito in ( select il.isn_internacao_leito from medpoint.t_internacao_leito il, " +
					"(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito " +
					"where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao " +
					"left join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao " +
					"where il.isn_motivo_alta = 5 " +
					"and i.dat_cadastro between  to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS') " +
					"and extract( day from (cast( IL.DAT_ALTA || ' ' || IL.HOR_ALTA || ':00' as timestamp ) - cast( it.dat_trans || ' ' || it.dsc_hor_cad || ':00' as timestamp ))) >= 1";

			lista = em.createNativeQuery(sql).getResultList();
			
		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}
		return (BigInteger) lista.get(0);
	}
	
	/*
	 * Pacientes Não Transferidos com Transferência Solicitada
	 */
	public BigInteger gerarEstatisticaNumTransfSolic(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";
		
		List lista = new ArrayList();
		
		try {
			
			String sql = "select  count(*) " +
					"from medpoint.t_internacao i " +
					"inner join (select * from medpoint.t_internacao_atendimento where isn_internacao_atendimento in ( select ia.isn_internacao_atendimento from medpoint.t_internacao_atendimento ia, " +
					"(select isn_internacao, min(isn_internacao_atendimento) as isn_internacao_atendimento from medpoint.t_internacao_atendimento group by isn_internacao) atendimento " +
					"where ia.isn_internacao_atendimento = atendimento.isn_internacao_atendimento)) as ia on ia.isn_internacao = i.isn_internacao " +
					"inner join (select * from medpoint.t_internacao_leito where isn_internacao_leito in ( select il.isn_internacao_leito from medpoint.t_internacao_leito il, " +
					"(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito " +
					"where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao	" +
					"inner join medpoint.t_internacao_trans it on it.isn_internacao = i.isn_internacao " +
					"where il.isn_motivo_alta <> 5 " +
					"and i.dat_cadastro between  to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS')";

			lista = em.createNativeQuery(sql).getResultList();
			
		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}
		return (BigInteger) lista.get(0);
	}
	
	/*
	 * Pacientes Adultos Transferidos
	 */
	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaNumTransfAdulto(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";
		
		try {
			
			String sql = "select dsc_referencia, count(*) " +
					"from medpoint.t_internacao i " +
					"inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " +
					"inner join (select * from medpoint.t_internacao_atendimento where isn_internacao_atendimento in ( select ia.isn_internacao_atendimento from medpoint.t_internacao_atendimento ia, " +
					"(select isn_internacao, min(isn_internacao_atendimento) as isn_internacao_atendimento from medpoint.t_internacao_atendimento group by isn_internacao) atendimento " +
					"where ia.isn_internacao_atendimento = atendimento.isn_internacao_atendimento)) as ia on ia.isn_internacao = i.isn_internacao " +
					"inner join (select * from medpoint.t_internacao_leito where isn_internacao_leito in ( select il.isn_internacao_leito from medpoint.t_internacao_leito il, " +
					"(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito " +
					"where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao " +
					"inner join medpoint.t_referencia r on r.isn_referencia = il.isn_hospital_destino " +
					"where il.isn_motivo_alta = 5 " +
					"and i.dat_cadastro between  to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS') " +
					"and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) >= 16 " +
					"group by dsc_referencia " +
					"order by dsc_referencia";

			ArrayList<EstatisticaEmergenciaVO> totais = new ArrayList<EstatisticaEmergenciaVO>();
			List<Object[]> lista = em.createNativeQuery(sql).getResultList();

			int cc=0;
			for (Object[] o : lista) {
				totais.add(new EstatisticaEmergenciaVO(cc, (String) o[0], Integer.parseInt(o[1]
						.toString())));
				cc++;
			}
			estatistica = totais;
			
		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}
		return estatistica;
	}
	
	/*
	 * Pacientes Infantis Transferidos
	 */
	@SuppressWarnings("unchecked")
	public Object gerarEstatisticaNumTransfInfantil(Date dtInicial, Date dtFinal) {
		EntityManager em = JPAResourceBean.getEntityManager();
		Object estatistica = new Object();

		String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(dtInicial) + " 00:00:00";
		String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(dtFinal) + " 23:59:59";
		
		try {
			
			String sql = "select dsc_referencia, count(*) " +
					"from medpoint.t_internacao i " +
					"inner join medpoint.t_paciente p on p.isn_paciente = i.isn_paciente " +
					"inner join (select * from medpoint.t_internacao_atendimento where isn_internacao_atendimento in ( select ia.isn_internacao_atendimento from medpoint.t_internacao_atendimento ia, " +
					"(select isn_internacao, min(isn_internacao_atendimento) as isn_internacao_atendimento from medpoint.t_internacao_atendimento group by isn_internacao) atendimento " +
					"where ia.isn_internacao_atendimento = atendimento.isn_internacao_atendimento)) as ia on ia.isn_internacao = i.isn_internacao " +
					"inner join (select * from medpoint.t_internacao_leito where isn_internacao_leito in ( select il.isn_internacao_leito from medpoint.t_internacao_leito il, " +
					"(select isn_internacao, max(isn_internacao_leito) as isn_internacao_leito from medpoint.t_internacao_leito group by isn_internacao) leito " +
					"where il.isn_internacao_leito = leito.isn_internacao_leito)) as il on il.isn_internacao = i.isn_internacao " +
					"inner join medpoint.t_referencia r on r.isn_referencia = il.isn_hospital_destino " +
					"where il.isn_motivo_alta = 5 " +
					"and i.dat_cadastro between  to_date('"+dataIni+"','dd/MM/yyyy HH24:MI:SS') and to_date('"+dataFim+"','dd/MM/yyyy HH24:MI:SS') " +
					"and extract(year FROM age(i.dat_cadastro, p.dat_nascimento)) < 16 " +
					"group by dsc_referencia " +
					"order by dsc_referencia";

			ArrayList<EstatisticaEmergenciaVO> totais = new ArrayList<EstatisticaEmergenciaVO>();
			List<Object[]> lista = em.createNativeQuery(sql).getResultList();

			int cc=0;
			for (Object[] o : lista) {
				totais.add(new EstatisticaEmergenciaVO(cc, (String) o[0], Integer.parseInt(o[1]
						.toString())));
				cc++;
			}
			estatistica = totais;
			
		} catch (Exception e) {
			System.out.print(e);
		} finally {
			em.close();
		}
		return estatistica;
	}

}
