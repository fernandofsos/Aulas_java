package br.org.isgh.seguranca.forms;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.IteratorUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.richfaces.event.UploadEvent;
import org.richfaces.model.UploadItem;

import br.org.isgh.seguranca.beans.Usuario;
import br.org.isgh.seguranca.impl.GerenciarUsuariosImpl;
import br.org.isgh.seguranca.util.jsf.AbstractBean;
import br.org.isgh.seguranca.util.jsf.JSFUtil;
import br.org.isgh.seguranca.util.permissoes.ValidaPermissaoUsuario;


public class GerenciarUsuariosForm extends AbstractBean<Usuario, GerenciarUsuariosImpl> {
	
	private String flgSituacao;
	private int valor;
	private boolean btnAtivarDesativar = true;
	
	 FacesMessage message = null;
	
	JSFUtil jsfUtil = new JSFUtil();
	

	public GerenciarUsuariosForm() {
		super(GerenciarUsuariosImpl.getInstancia());
		this.ACTION_SEARCH = "gerenciarUsuarios";
		this.pageTitle = "Gerenciar Usuarios";
	}
	
	
	
	public String atualizar()
	{
	      String retorno = null;
	      try 
	      {
	    	  setCurrentState(STATE_EDIT);
	    	  
	    	  if(validarAcesso())
	    	  {
	    		  retorno = super.preparaPesquisar();
	    	  }
	      }
	      catch (Exception e) {
			FacesMessage message = new FacesMessage(e.getMessage());
	        message.setSeverity(FacesMessage.SEVERITY_ERROR);
	        FacesContext.getCurrentInstance().addMessage("", message);
		}
	      
	      return retorno;
	}
	
	
	@Override
	protected boolean validarAcesso() {
		boolean temAcesso = true;
		if(!ValidaPermissaoUsuario.getInstancia().verificaPermissao("gerenciarUsuarios", (String) jsfUtil.getSession().getAttribute(JSFUtil.acao)))
		{
			temAcesso = false;
			HttpServletResponse rp = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
			
			try {
				rp.sendRedirect("/seguranca/acessoNegado.jsf");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return temAcesso;
	}	
	
	

	public synchronized void validateFileUploadListener(final UploadEvent event) throws Exception  {
		try {
			UploadItem item = event.getUploadItem();
			File uploadedFile = item.getFile();
			String uploadedFileName = item.getFileName();

			if (Files.exists(uploadedFile.toPath()) && uploadedFileName.equals("RH_ATIVA_DESATIVA.xls")) {
				File fonte = new File(uploadedFile.getAbsolutePath());
				File destino = new File("/tmp/" + uploadedFileName);

				copia(fonte, destino);
				setBtnAtivarDesativar(false);
			} else {
				setValor(3);
				throw new Exception("Nome do arquivo é inválido!");
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}

	public void deletaArquivoTmp() {

		setValor(0);

		try {
			File file = new File("/tmp/RH_ATIVA_DESATIVA.xls");
			file.delete();
			setValor(2);
			setBtnAtivarDesativar(false);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public static void copia(File fonte, File destino) throws IOException {

		InputStream in = new FileInputStream(fonte);
		OutputStream out = new FileOutputStream(destino);
		
		try {
			byte[] buf = new byte[1024];
			int len;
			while ((len = in.read(buf)) > 0) {
				out.write(buf, 0, len);
			}
			in.close();
			out.close();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			in.close();
			out.close();
		}

	}

	public void importaXls() throws IOException {

		setValor(0);
		
		Usuario usuario = new Usuario();

		usuario.setFiltroMap(new HashMap<String, Object>());
		usuario.getFiltroMap().put("dscCpf", new ArrayList<String>());

		try {

			// Recuperando a ABA
			FileInputStream file = new FileInputStream(new File("/tmp/RH_ATIVA_DESATIVA.xls"));

			// Workbook workbook = new XSSFWorkbook();
			Workbook workbook = new HSSFWorkbook(file);

			// Capturando a ABA
			Sheet sheaet = workbook.getSheetAt(0);

			// Setando a linha
			List<Row> rows = (List<Row>) toList(sheaet.iterator());

			for (Row row : rows) {

				List<Cell> cells = (List<Cell>) toList(row.cellIterator());
				String text = cells.get(3).getStringCellValue().replaceAll(".", "").trim();
				System.out.println(text);
				
				if (cells.get(3).getStringCellValue().length() > 0 && cells.get(3).getStringCellValue().length() < 12 && !cells.get(3).getStringCellValue().equals("CPF") ) {
					((ArrayList<String>) usuario.getFiltroMap().get("dscCpf")).add(cells.get(3).getStringCellValue());
				}

			}
			// usuario.setIsnUsuarioCad(jsfUtil.getSession().gets);
			alterarUsuario(usuario);
			deletaArquivoTmp();
			setValor(1);
			setBtnAtivarDesativar(true);

		} catch (IOException e) {
			e.printStackTrace();
			throw new IOException("Erro ao processar arquivo.", e.getCause());
		}
	}

	private void alterarUsuario(Usuario usuario) {
		
		setValor(0);

		try {
			
			List<Usuario> lstUsuario = GerenciarUsuariosImpl.getInstancia().pesquisar(usuario, 0);

			for (Usuario objUsuario : lstUsuario) {
				objUsuario.setFlgSituacao(this.getFlgSituacao());
				objUsuario.setIsnUsuarioCad(jsfUtil.getUsuarioLogado().getIsnUsuario());
			}

			lstUsuario = GerenciarUsuariosImpl.getInstancia().alterarLista(lstUsuario);
			
			setValor(1);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static List<?> toList(Iterator<?> iterator) {
		return IteratorUtils.toList(iterator);
	}

	public String getFlgSituacao() {
		return flgSituacao;
	}

	public void setFlgSituacao(String flgSituacao) {
		this.flgSituacao = flgSituacao;
	}

	public int getValor() {
		return valor;
	}

	public void setValor(int valor) {
		this.valor = valor;
	}

	public boolean isBtnAtivarDesativar() {
		return btnAtivarDesativar;
	}

	public void setBtnAtivarDesativar(boolean btnAtivarDesativar) {
		this.btnAtivarDesativar = btnAtivarDesativar;
	}

}
